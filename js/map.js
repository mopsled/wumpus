// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Map = (function() {
    var adjacentCoordinates, drawLitTile, flatten, generateTiles, generateWalls;

    function Map(display) {
      this.display = display;
      this.isAFloorSpace = __bind(this.isAFloorSpace, this);
      this.drawAt = __bind(this.drawAt, this);
      this.drawFOV = __bind(this.drawFOV, this);
      this.tiles = generateTiles();
    }

    Map.prototype.drawAll = function() {
      var x, y, _i, _len, _ref, _ref1, _results;
      _ref = this.tiles.keys();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], x = _ref1[0], y = _ref1[1];
        _results.push(this.drawAt([x, y]));
      }
      return _results;
    };

    Map.prototype.drawFOV = function(fov) {
      var x, y, _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = fov.length; _i < _len; _i++) {
        _ref = fov[_i], x = _ref[0], y = _ref[1];
        _results.push(drawLitTile(x, y, this));
      }
      return _results;
    };

    Map.prototype.drawAt = function(x, y) {
      return this.display.draw(x, y, this.tiles.get([x, y]));
    };

    Map.prototype.randomFloorSpace = function() {
      var floor, k;
      floor = (function() {
        var _i, _len, _ref, _results;
        _ref = this.tiles.keys();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          if (this.tiles.get(k) === '.') {
            _results.push(k);
          }
        }
        return _results;
      }).call(this);
      return floor.randomize()[0];
    };

    Map.prototype.isAFloorSpace = function(x, y) {
      return this.tiles.get([x, y]) === '.';
    };

    generateTiles = function() {
      var coor, differ, tiles, _i, _len, _ref;
      tiles = new ArrayDictionary;
      differ = new ROT.Map.Digger();
      differ.create(function(x, y, wall) {
        if (!wall) {
          return tiles.set([x, y], '.');
        }
      });
      _ref = generateWalls(tiles);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        coor = _ref[_i];
        tiles.set(coor, '#');
      }
      return tiles;
    };

    generateWalls = function(floor) {
      var adjacent, floorCoor, wallCoor, x, y;
      floorCoor = floor.keys();
      adjacent = flatten((function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = floorCoor.length; _i < _len; _i++) {
          _ref = floorCoor[_i], x = _ref[0], y = _ref[1];
          _results.push(adjacentCoordinates(x, y));
        }
        return _results;
      })());
      wallCoor = (function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = adjacent.length; _i < _len; _i++) {
          _ref = adjacent[_i], x = _ref[0], y = _ref[1];
          if (floor.get([x, y]) !== '.') {
            _results.push([x, y]);
          }
        }
        return _results;
      })();
      return wallCoor;
    };

    drawLitTile = function(x, y, map) {
      return map.display.draw(x, y, map.tiles.get([x, y]), '#fff', '#660');
    };

    adjacentCoordinates = function(x, y) {
      var xi, yi, _i, _len, _ref, _ref1, _results;
      _ref = ROT.DIRS[8];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], xi = _ref1[0], yi = _ref1[1];
        _results.push([x + xi, y + yi]);
      }
      return _results;
    };

    flatten = function(a) {
      if (a.length === 0) {
        return [];
      }
      return a.reduce(function(lhs, rhs) {
        return lhs.concat(rhs);
      });
    };

    return Map;

  })();

}).call(this);
