// Generated by CoffeeScript 1.7.1
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Map = (function() {
    var adjacentCoordinates, flatten, generateTiles;

    function Map(display) {
      this.display = display;
      this.isAFloorSpace = __bind(this.isAFloorSpace, this);
      this.drawDarkTile = __bind(this.drawDarkTile, this);
      this.drawFOV = __bind(this.drawFOV, this);
      this.tiles = generateTiles();
    }

    Map.prototype.drawFOV = function(fov) {
      var c, inFOV, t, _i, _len, _ref, _results;
      _ref = (function() {
        var _j, _len, _results1;
        _results1 = [];
        for (_j = 0, _len = fov.length; _j < _len; _j++) {
          c = fov[_j];
          _results1.push(this.tiles.get(c));
        }
        return _results1;
      }).call(this);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        _results.push(t.draw(this.display, inFOV = true));
      }
      return _results;
    };

    Map.prototype.drawDarkTile = function(x, y) {
      var tile;
      tile = this.tiles.get([x, y]);
      return tile.draw(this.display);
    };

    Map.prototype.randomFloorSpace = function() {
      var floor, k;
      floor = (function() {
        var _i, _len, _ref, _results;
        _ref = this.tiles.keys();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          k = _ref[_i];
          if (this.tiles.get(k) instanceof Floor) {
            _results.push(k);
          }
        }
        return _results;
      }).call(this);
      return floor.randomize()[0];
    };

    Map.prototype.isAFloorSpace = function(x, y) {
      return this.tiles.get([x, y]) instanceof Floor;
    };

    generateTiles = function() {
      var digger, tiles;
      tiles = new ArrayDictionary;
      digger = new ROT.Map.Digger();
      digger.create(function(x, y, wall) {
        var tile;
        tile = (wall ? new Wall(x, y) : new Floor(x, y));
        return tiles.set([x, y], tile);
      });
      return tiles;
    };

    adjacentCoordinates = function(x, y) {
      var xi, yi, _i, _len, _ref, _ref1, _results;
      _ref = ROT.DIRS[8];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], xi = _ref1[0], yi = _ref1[1];
        _results.push([x + xi, y + yi]);
      }
      return _results;
    };

    flatten = function(a) {
      if (a.length === 0) {
        return [];
      }
      return a.reduce(function(lhs, rhs) {
        return lhs.concat(rhs);
      });
    };

    return Map;

  })();

}).call(this);
