// Generated by CoffeeScript 1.7.1
(function() {
  this.WumpusDungeon = (function() {
    var maxRoomHeight, maxRoomWidth, roomCount;

    function WumpusDungeon(width, height) {
      this.width = width != null ? width : 32;
      this.height = height != null ? height : 32;
    }

    WumpusDungeon.prototype.create = function(callback) {
      var startX, startY, x, y, _, _i, _results;
      if (callback == null) {
        callback = function() {};
      }
      this.rooms = [];
      _results = [];
      for (_ = _i = 0; 0 <= roomCount ? _i < roomCount : _i > roomCount; _ = 0 <= roomCount ? ++_i : --_i) {
        startX = Math.floor(ROT.RNG.getUniform() * (this.width - maxRoomWidth));
        startY = Math.floor(ROT.RNG.getUniform() * (this.height - maxRoomHeight));
        this.rooms.push([startX, startY, startX + maxRoomWidth, startY + maxRoomHeight]);
        _results.push((function() {
          var _j, _ref, _results1;
          _results1 = [];
          for (x = _j = startX, _ref = startX + maxRoomWidth; startX <= _ref ? _j <= _ref : _j >= _ref; x = startX <= _ref ? ++_j : --_j) {
            _results1.push((function() {
              var _k, _ref1, _results2;
              _results2 = [];
              for (y = _k = startY, _ref1 = startY + maxRoomHeight; startY <= _ref1 ? _k < _ref1 : _k > _ref1; y = startY <= _ref1 ? ++_k : --_k) {
                _results2.push(callback(x, y));
              }
              return _results2;
            })());
          }
          return _results1;
        })());
      }
      return _results;
    };

    WumpusDungeon.prototype.getRooms = function() {
      return this.rooms;
    };

    roomCount = 10;

    maxRoomWidth = 4;

    maxRoomHeight = 3;

    return WumpusDungeon;

  })();

}).call(this);
